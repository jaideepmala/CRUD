/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-23")
public class downloadCersaiCKYCReportService {

  public interface Iface {

    public CersaiResponseDto downloadCersaiCKYCReport(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source) throws IOException, CersaiDataMismatchException, CersaiDobMismatchException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void downloadCersaiCKYCReport(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source, org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CersaiResponseDto downloadCersaiCKYCReport(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source) throws IOException, CersaiDataMismatchException, CersaiDobMismatchException, org.apache.thrift.TException
    {
      send_downloadCersaiCKYCReport(ckycId, dob, retryCount, source);
      return recv_downloadCersaiCKYCReport();
    }

    public void send_downloadCersaiCKYCReport(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source) throws org.apache.thrift.TException
    {
      downloadCersaiCKYCReport_args args = new downloadCersaiCKYCReport_args();
      args.setCkycId(ckycId);
      args.setDob(dob);
      args.setRetryCount(retryCount);
      args.setSource(source);
      sendBase("downloadCersaiCKYCReport", args);
    }

    public CersaiResponseDto recv_downloadCersaiCKYCReport() throws IOException, CersaiDataMismatchException, CersaiDobMismatchException, org.apache.thrift.TException
    {
      downloadCersaiCKYCReport_result result = new downloadCersaiCKYCReport_result();
      receiveBase(result, "downloadCersaiCKYCReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioException != null) {
        throw result.ioException;
      }
      if (result.cersaiDataMismatchException != null) {
        throw result.cersaiDataMismatchException;
      }
      if (result.cersaiDobMismatchException != null) {
        throw result.cersaiDobMismatchException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "downloadCersaiCKYCReport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void downloadCersaiCKYCReport(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source, org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      downloadCersaiCKYCReport_call method_call = new downloadCersaiCKYCReport_call(ckycId, dob, retryCount, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class downloadCersaiCKYCReport_call extends org.apache.thrift.async.TAsyncMethodCall<CersaiResponseDto> {
      private java.lang.String ckycId;
      private java.lang.String dob;
      private int retryCount;
      private CersaiRequestSource source;
      public downloadCersaiCKYCReport_call(java.lang.String ckycId, java.lang.String dob, int retryCount, CersaiRequestSource source, org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ckycId = ckycId;
        this.dob = dob;
        this.retryCount = retryCount;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("downloadCersaiCKYCReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        downloadCersaiCKYCReport_args args = new downloadCersaiCKYCReport_args();
        args.setCkycId(ckycId);
        args.setDob(dob);
        args.setRetryCount(retryCount);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CersaiResponseDto getResult() throws IOException, CersaiDataMismatchException, CersaiDobMismatchException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_downloadCersaiCKYCReport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("downloadCersaiCKYCReport", new downloadCersaiCKYCReport());
      return processMap;
    }

    public static class downloadCersaiCKYCReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, downloadCersaiCKYCReport_args> {
      public downloadCersaiCKYCReport() {
        super("downloadCersaiCKYCReport");
      }

      public downloadCersaiCKYCReport_args getEmptyArgsInstance() {
        return new downloadCersaiCKYCReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public downloadCersaiCKYCReport_result getResult(I iface, downloadCersaiCKYCReport_args args) throws org.apache.thrift.TException {
        downloadCersaiCKYCReport_result result = new downloadCersaiCKYCReport_result();
        try {
          result.success = iface.downloadCersaiCKYCReport(args.ckycId, args.dob, args.retryCount, args.source);
        } catch (IOException ioException) {
          result.ioException = ioException;
        } catch (CersaiDataMismatchException cersaiDataMismatchException) {
          result.cersaiDataMismatchException = cersaiDataMismatchException;
        } catch (CersaiDobMismatchException cersaiDobMismatchException) {
          result.cersaiDobMismatchException = cersaiDobMismatchException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("downloadCersaiCKYCReport", new downloadCersaiCKYCReport());
      return processMap;
    }

    public static class downloadCersaiCKYCReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, downloadCersaiCKYCReport_args, CersaiResponseDto> {
      public downloadCersaiCKYCReport() {
        super("downloadCersaiCKYCReport");
      }

      public downloadCersaiCKYCReport_args getEmptyArgsInstance() {
        return new downloadCersaiCKYCReport_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto>() { 
          public void onComplete(CersaiResponseDto o) {
            downloadCersaiCKYCReport_result result = new downloadCersaiCKYCReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            downloadCersaiCKYCReport_result result = new downloadCersaiCKYCReport_result();
            if (e instanceof IOException) {
              result.ioException = (IOException) e;
              result.setIoExceptionIsSet(true);
              msg = result;
            } else if (e instanceof CersaiDataMismatchException) {
              result.cersaiDataMismatchException = (CersaiDataMismatchException) e;
              result.setCersaiDataMismatchExceptionIsSet(true);
              msg = result;
            } else if (e instanceof CersaiDobMismatchException) {
              result.cersaiDobMismatchException = (CersaiDobMismatchException) e;
              result.setCersaiDobMismatchExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, downloadCersaiCKYCReport_args args, org.apache.thrift.async.AsyncMethodCallback<CersaiResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.downloadCersaiCKYCReport(args.ckycId, args.dob, args.retryCount, args.source,resultHandler);
      }
    }

  }

  public static class downloadCersaiCKYCReport_args implements org.apache.thrift.TBase<downloadCersaiCKYCReport_args, downloadCersaiCKYCReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<downloadCersaiCKYCReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downloadCersaiCKYCReport_args");

    private static final org.apache.thrift.protocol.TField CKYC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ckycId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RETRY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retryCount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadCersaiCKYCReport_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadCersaiCKYCReport_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String ckycId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String dob; // required
    public int retryCount; // required
    /**
     * 
     * @see CersaiRequestSource
     */
    public @org.apache.thrift.annotation.Nullable CersaiRequestSource source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CKYC_ID((short)1, "ckycId"),
      DOB((short)2, "dob"),
      RETRY_COUNT((short)3, "retryCount"),
      /**
       * 
       * @see CersaiRequestSource
       */
      SOURCE((short)4, "source");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CKYC_ID
            return CKYC_ID;
          case 2: // DOB
            return DOB;
          case 3: // RETRY_COUNT
            return RETRY_COUNT;
          case 4: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RETRYCOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CKYC_ID, new org.apache.thrift.meta_data.FieldMetaData("ckycId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
      tmpMap.put(_Fields.RETRY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retryCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CersaiRequestSource.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadCersaiCKYCReport_args.class, metaDataMap);
    }

    public downloadCersaiCKYCReport_args() {
    }

    public downloadCersaiCKYCReport_args(
      java.lang.String ckycId,
      java.lang.String dob,
      int retryCount,
      CersaiRequestSource source)
    {
      this();
      this.ckycId = ckycId;
      this.dob = dob;
      this.retryCount = retryCount;
      setRetryCountIsSet(true);
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadCersaiCKYCReport_args(downloadCersaiCKYCReport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCkycId()) {
        this.ckycId = other.ckycId;
      }
      if (other.isSetDob()) {
        this.dob = other.dob;
      }
      this.retryCount = other.retryCount;
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    public downloadCersaiCKYCReport_args deepCopy() {
      return new downloadCersaiCKYCReport_args(this);
    }

    @Override
    public void clear() {
      this.ckycId = null;
      this.dob = null;
      setRetryCountIsSet(false);
      this.retryCount = 0;
      this.source = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCkycId() {
      return this.ckycId;
    }

    public downloadCersaiCKYCReport_args setCkycId(@org.apache.thrift.annotation.Nullable java.lang.String ckycId) {
      this.ckycId = ckycId;
      return this;
    }

    public void unsetCkycId() {
      this.ckycId = null;
    }

    /** Returns true if field ckycId is set (has been assigned a value) and false otherwise */
    public boolean isSetCkycId() {
      return this.ckycId != null;
    }

    public void setCkycIdIsSet(boolean value) {
      if (!value) {
        this.ckycId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDob() {
      return this.dob;
    }

    public downloadCersaiCKYCReport_args setDob(@org.apache.thrift.annotation.Nullable java.lang.String dob) {
      this.dob = dob;
      return this;
    }

    public void unsetDob() {
      this.dob = null;
    }

    /** Returns true if field dob is set (has been assigned a value) and false otherwise */
    public boolean isSetDob() {
      return this.dob != null;
    }

    public void setDobIsSet(boolean value) {
      if (!value) {
        this.dob = null;
      }
    }

    public int getRetryCount() {
      return this.retryCount;
    }

    public downloadCersaiCKYCReport_args setRetryCount(int retryCount) {
      this.retryCount = retryCount;
      setRetryCountIsSet(true);
      return this;
    }

    public void unsetRetryCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
    }

    /** Returns true if field retryCount is set (has been assigned a value) and false otherwise */
    public boolean isSetRetryCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
    }

    public void setRetryCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID, value);
    }

    /**
     * 
     * @see CersaiRequestSource
     */
    @org.apache.thrift.annotation.Nullable
    public CersaiRequestSource getSource() {
      return this.source;
    }

    /**
     * 
     * @see CersaiRequestSource
     */
    public downloadCersaiCKYCReport_args setSource(@org.apache.thrift.annotation.Nullable CersaiRequestSource source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CKYC_ID:
        if (value == null) {
          unsetCkycId();
        } else {
          setCkycId((java.lang.String)value);
        }
        break;

      case DOB:
        if (value == null) {
          unsetDob();
        } else {
          setDob((java.lang.String)value);
        }
        break;

      case RETRY_COUNT:
        if (value == null) {
          unsetRetryCount();
        } else {
          setRetryCount((java.lang.Integer)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((CersaiRequestSource)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CKYC_ID:
        return getCkycId();

      case DOB:
        return getDob();

      case RETRY_COUNT:
        return getRetryCount();

      case SOURCE:
        return getSource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CKYC_ID:
        return isSetCkycId();
      case DOB:
        return isSetDob();
      case RETRY_COUNT:
        return isSetRetryCount();
      case SOURCE:
        return isSetSource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadCersaiCKYCReport_args)
        return this.equals((downloadCersaiCKYCReport_args)that);
      return false;
    }

    public boolean equals(downloadCersaiCKYCReport_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ckycId = true && this.isSetCkycId();
      boolean that_present_ckycId = true && that.isSetCkycId();
      if (this_present_ckycId || that_present_ckycId) {
        if (!(this_present_ckycId && that_present_ckycId))
          return false;
        if (!this.ckycId.equals(that.ckycId))
          return false;
      }

      boolean this_present_dob = true && this.isSetDob();
      boolean that_present_dob = true && that.isSetDob();
      if (this_present_dob || that_present_dob) {
        if (!(this_present_dob && that_present_dob))
          return false;
        if (!this.dob.equals(that.dob))
          return false;
      }

      boolean this_present_retryCount = true;
      boolean that_present_retryCount = true;
      if (this_present_retryCount || that_present_retryCount) {
        if (!(this_present_retryCount && that_present_retryCount))
          return false;
        if (this.retryCount != that.retryCount)
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCkycId()) ? 131071 : 524287);
      if (isSetCkycId())
        hashCode = hashCode * 8191 + ckycId.hashCode();

      hashCode = hashCode * 8191 + ((isSetDob()) ? 131071 : 524287);
      if (isSetDob())
        hashCode = hashCode * 8191 + dob.hashCode();

      hashCode = hashCode * 8191 + retryCount;

      hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
      if (isSetSource())
        hashCode = hashCode * 8191 + source.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(downloadCersaiCKYCReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCkycId()).compareTo(other.isSetCkycId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCkycId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ckycId, other.ckycId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDob()).compareTo(other.isSetDob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, other.dob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRetryCount()).compareTo(other.isSetRetryCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetryCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryCount, other.retryCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadCersaiCKYCReport_args(");
      boolean first = true;

      sb.append("ckycId:");
      if (this.ckycId == null) {
        sb.append("null");
      } else {
        sb.append(this.ckycId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dob:");
      if (this.dob == null) {
        sb.append("null");
      } else {
        sb.append(this.dob);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("retryCount:");
      sb.append(this.retryCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downloadCersaiCKYCReport_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downloadCersaiCKYCReport_argsStandardScheme getScheme() {
        return new downloadCersaiCKYCReport_argsStandardScheme();
      }
    }

    private static class downloadCersaiCKYCReport_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<downloadCersaiCKYCReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downloadCersaiCKYCReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CKYC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ckycId = iprot.readString();
                struct.setCkycIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dob = iprot.readString();
                struct.setDobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETRY_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.retryCount = iprot.readI32();
                struct.setRetryCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.source = CersaiRequestSource.findByValue(iprot.readI32());
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downloadCersaiCKYCReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ckycId != null) {
          oprot.writeFieldBegin(CKYC_ID_FIELD_DESC);
          oprot.writeString(struct.ckycId);
          oprot.writeFieldEnd();
        }
        if (struct.dob != null) {
          oprot.writeFieldBegin(DOB_FIELD_DESC);
          oprot.writeString(struct.dob);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RETRY_COUNT_FIELD_DESC);
        oprot.writeI32(struct.retryCount);
        oprot.writeFieldEnd();
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeI32(struct.source.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downloadCersaiCKYCReport_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downloadCersaiCKYCReport_argsTupleScheme getScheme() {
        return new downloadCersaiCKYCReport_argsTupleScheme();
      }
    }

    private static class downloadCersaiCKYCReport_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<downloadCersaiCKYCReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, downloadCersaiCKYCReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCkycId()) {
          optionals.set(0);
        }
        if (struct.isSetDob()) {
          optionals.set(1);
        }
        if (struct.isSetRetryCount()) {
          optionals.set(2);
        }
        if (struct.isSetSource()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCkycId()) {
          oprot.writeString(struct.ckycId);
        }
        if (struct.isSetDob()) {
          oprot.writeString(struct.dob);
        }
        if (struct.isSetRetryCount()) {
          oprot.writeI32(struct.retryCount);
        }
        if (struct.isSetSource()) {
          oprot.writeI32(struct.source.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, downloadCersaiCKYCReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ckycId = iprot.readString();
          struct.setCkycIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dob = iprot.readString();
          struct.setDobIsSet(true);
        }
        if (incoming.get(2)) {
          struct.retryCount = iprot.readI32();
          struct.setRetryCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.source = CersaiRequestSource.findByValue(iprot.readI32());
          struct.setSourceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class downloadCersaiCKYCReport_result implements org.apache.thrift.TBase<downloadCersaiCKYCReport_result, downloadCersaiCKYCReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<downloadCersaiCKYCReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downloadCersaiCKYCReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IO_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ioException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CERSAI_DATA_MISMATCH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cersaiDataMismatchException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CERSAI_DOB_MISMATCH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cersaiDobMismatchException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new downloadCersaiCKYCReport_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new downloadCersaiCKYCReport_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CersaiResponseDto success; // required
    public @org.apache.thrift.annotation.Nullable IOException ioException; // required
    public @org.apache.thrift.annotation.Nullable CersaiDataMismatchException cersaiDataMismatchException; // required
    public @org.apache.thrift.annotation.Nullable CersaiDobMismatchException cersaiDobMismatchException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IO_EXCEPTION((short)1, "ioException"),
      CERSAI_DATA_MISMATCH_EXCEPTION((short)2, "cersaiDataMismatchException"),
      CERSAI_DOB_MISMATCH_EXCEPTION((short)3, "cersaiDobMismatchException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IO_EXCEPTION
            return IO_EXCEPTION;
          case 2: // CERSAI_DATA_MISMATCH_EXCEPTION
            return CERSAI_DATA_MISMATCH_EXCEPTION;
          case 3: // CERSAI_DOB_MISMATCH_EXCEPTION
            return CERSAI_DOB_MISMATCH_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CersaiResponseDto.class)));
      tmpMap.put(_Fields.IO_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("ioException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IOException.class)));
      tmpMap.put(_Fields.CERSAI_DATA_MISMATCH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cersaiDataMismatchException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CersaiDataMismatchException.class)));
      tmpMap.put(_Fields.CERSAI_DOB_MISMATCH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cersaiDobMismatchException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CersaiDobMismatchException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downloadCersaiCKYCReport_result.class, metaDataMap);
    }

    public downloadCersaiCKYCReport_result() {
    }

    public downloadCersaiCKYCReport_result(
      CersaiResponseDto success,
      IOException ioException,
      CersaiDataMismatchException cersaiDataMismatchException,
      CersaiDobMismatchException cersaiDobMismatchException)
    {
      this();
      this.success = success;
      this.ioException = ioException;
      this.cersaiDataMismatchException = cersaiDataMismatchException;
      this.cersaiDobMismatchException = cersaiDobMismatchException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadCersaiCKYCReport_result(downloadCersaiCKYCReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new CersaiResponseDto(other.success);
      }
      if (other.isSetIoException()) {
        this.ioException = new IOException(other.ioException);
      }
      if (other.isSetCersaiDataMismatchException()) {
        this.cersaiDataMismatchException = new CersaiDataMismatchException(other.cersaiDataMismatchException);
      }
      if (other.isSetCersaiDobMismatchException()) {
        this.cersaiDobMismatchException = new CersaiDobMismatchException(other.cersaiDobMismatchException);
      }
    }

    public downloadCersaiCKYCReport_result deepCopy() {
      return new downloadCersaiCKYCReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ioException = null;
      this.cersaiDataMismatchException = null;
      this.cersaiDobMismatchException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CersaiResponseDto getSuccess() {
      return this.success;
    }

    public downloadCersaiCKYCReport_result setSuccess(@org.apache.thrift.annotation.Nullable CersaiResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public IOException getIoException() {
      return this.ioException;
    }

    public downloadCersaiCKYCReport_result setIoException(@org.apache.thrift.annotation.Nullable IOException ioException) {
      this.ioException = ioException;
      return this;
    }

    public void unsetIoException() {
      this.ioException = null;
    }

    /** Returns true if field ioException is set (has been assigned a value) and false otherwise */
    public boolean isSetIoException() {
      return this.ioException != null;
    }

    public void setIoExceptionIsSet(boolean value) {
      if (!value) {
        this.ioException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CersaiDataMismatchException getCersaiDataMismatchException() {
      return this.cersaiDataMismatchException;
    }

    public downloadCersaiCKYCReport_result setCersaiDataMismatchException(@org.apache.thrift.annotation.Nullable CersaiDataMismatchException cersaiDataMismatchException) {
      this.cersaiDataMismatchException = cersaiDataMismatchException;
      return this;
    }

    public void unsetCersaiDataMismatchException() {
      this.cersaiDataMismatchException = null;
    }

    /** Returns true if field cersaiDataMismatchException is set (has been assigned a value) and false otherwise */
    public boolean isSetCersaiDataMismatchException() {
      return this.cersaiDataMismatchException != null;
    }

    public void setCersaiDataMismatchExceptionIsSet(boolean value) {
      if (!value) {
        this.cersaiDataMismatchException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CersaiDobMismatchException getCersaiDobMismatchException() {
      return this.cersaiDobMismatchException;
    }

    public downloadCersaiCKYCReport_result setCersaiDobMismatchException(@org.apache.thrift.annotation.Nullable CersaiDobMismatchException cersaiDobMismatchException) {
      this.cersaiDobMismatchException = cersaiDobMismatchException;
      return this;
    }

    public void unsetCersaiDobMismatchException() {
      this.cersaiDobMismatchException = null;
    }

    /** Returns true if field cersaiDobMismatchException is set (has been assigned a value) and false otherwise */
    public boolean isSetCersaiDobMismatchException() {
      return this.cersaiDobMismatchException != null;
    }

    public void setCersaiDobMismatchExceptionIsSet(boolean value) {
      if (!value) {
        this.cersaiDobMismatchException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CersaiResponseDto)value);
        }
        break;

      case IO_EXCEPTION:
        if (value == null) {
          unsetIoException();
        } else {
          setIoException((IOException)value);
        }
        break;

      case CERSAI_DATA_MISMATCH_EXCEPTION:
        if (value == null) {
          unsetCersaiDataMismatchException();
        } else {
          setCersaiDataMismatchException((CersaiDataMismatchException)value);
        }
        break;

      case CERSAI_DOB_MISMATCH_EXCEPTION:
        if (value == null) {
          unsetCersaiDobMismatchException();
        } else {
          setCersaiDobMismatchException((CersaiDobMismatchException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IO_EXCEPTION:
        return getIoException();

      case CERSAI_DATA_MISMATCH_EXCEPTION:
        return getCersaiDataMismatchException();

      case CERSAI_DOB_MISMATCH_EXCEPTION:
        return getCersaiDobMismatchException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IO_EXCEPTION:
        return isSetIoException();
      case CERSAI_DATA_MISMATCH_EXCEPTION:
        return isSetCersaiDataMismatchException();
      case CERSAI_DOB_MISMATCH_EXCEPTION:
        return isSetCersaiDobMismatchException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadCersaiCKYCReport_result)
        return this.equals((downloadCersaiCKYCReport_result)that);
      return false;
    }

    public boolean equals(downloadCersaiCKYCReport_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ioException = true && this.isSetIoException();
      boolean that_present_ioException = true && that.isSetIoException();
      if (this_present_ioException || that_present_ioException) {
        if (!(this_present_ioException && that_present_ioException))
          return false;
        if (!this.ioException.equals(that.ioException))
          return false;
      }

      boolean this_present_cersaiDataMismatchException = true && this.isSetCersaiDataMismatchException();
      boolean that_present_cersaiDataMismatchException = true && that.isSetCersaiDataMismatchException();
      if (this_present_cersaiDataMismatchException || that_present_cersaiDataMismatchException) {
        if (!(this_present_cersaiDataMismatchException && that_present_cersaiDataMismatchException))
          return false;
        if (!this.cersaiDataMismatchException.equals(that.cersaiDataMismatchException))
          return false;
      }

      boolean this_present_cersaiDobMismatchException = true && this.isSetCersaiDobMismatchException();
      boolean that_present_cersaiDobMismatchException = true && that.isSetCersaiDobMismatchException();
      if (this_present_cersaiDobMismatchException || that_present_cersaiDobMismatchException) {
        if (!(this_present_cersaiDobMismatchException && that_present_cersaiDobMismatchException))
          return false;
        if (!this.cersaiDobMismatchException.equals(that.cersaiDobMismatchException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIoException()) ? 131071 : 524287);
      if (isSetIoException())
        hashCode = hashCode * 8191 + ioException.hashCode();

      hashCode = hashCode * 8191 + ((isSetCersaiDataMismatchException()) ? 131071 : 524287);
      if (isSetCersaiDataMismatchException())
        hashCode = hashCode * 8191 + cersaiDataMismatchException.hashCode();

      hashCode = hashCode * 8191 + ((isSetCersaiDobMismatchException()) ? 131071 : 524287);
      if (isSetCersaiDobMismatchException())
        hashCode = hashCode * 8191 + cersaiDobMismatchException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(downloadCersaiCKYCReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIoException()).compareTo(other.isSetIoException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioException, other.ioException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCersaiDataMismatchException()).compareTo(other.isSetCersaiDataMismatchException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCersaiDataMismatchException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cersaiDataMismatchException, other.cersaiDataMismatchException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCersaiDobMismatchException()).compareTo(other.isSetCersaiDobMismatchException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCersaiDobMismatchException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cersaiDobMismatchException, other.cersaiDobMismatchException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("downloadCersaiCKYCReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioException:");
      if (this.ioException == null) {
        sb.append("null");
      } else {
        sb.append(this.ioException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cersaiDataMismatchException:");
      if (this.cersaiDataMismatchException == null) {
        sb.append("null");
      } else {
        sb.append(this.cersaiDataMismatchException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cersaiDobMismatchException:");
      if (this.cersaiDobMismatchException == null) {
        sb.append("null");
      } else {
        sb.append(this.cersaiDobMismatchException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downloadCersaiCKYCReport_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downloadCersaiCKYCReport_resultStandardScheme getScheme() {
        return new downloadCersaiCKYCReport_resultStandardScheme();
      }
    }

    private static class downloadCersaiCKYCReport_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<downloadCersaiCKYCReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downloadCersaiCKYCReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CersaiResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IO_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioException = new IOException();
                struct.ioException.read(iprot);
                struct.setIoExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CERSAI_DATA_MISMATCH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cersaiDataMismatchException = new CersaiDataMismatchException();
                struct.cersaiDataMismatchException.read(iprot);
                struct.setCersaiDataMismatchExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CERSAI_DOB_MISMATCH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cersaiDobMismatchException = new CersaiDobMismatchException();
                struct.cersaiDobMismatchException.read(iprot);
                struct.setCersaiDobMismatchExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downloadCersaiCKYCReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioException != null) {
          oprot.writeFieldBegin(IO_EXCEPTION_FIELD_DESC);
          struct.ioException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cersaiDataMismatchException != null) {
          oprot.writeFieldBegin(CERSAI_DATA_MISMATCH_EXCEPTION_FIELD_DESC);
          struct.cersaiDataMismatchException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cersaiDobMismatchException != null) {
          oprot.writeFieldBegin(CERSAI_DOB_MISMATCH_EXCEPTION_FIELD_DESC);
          struct.cersaiDobMismatchException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downloadCersaiCKYCReport_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public downloadCersaiCKYCReport_resultTupleScheme getScheme() {
        return new downloadCersaiCKYCReport_resultTupleScheme();
      }
    }

    private static class downloadCersaiCKYCReport_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<downloadCersaiCKYCReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, downloadCersaiCKYCReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIoException()) {
          optionals.set(1);
        }
        if (struct.isSetCersaiDataMismatchException()) {
          optionals.set(2);
        }
        if (struct.isSetCersaiDobMismatchException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIoException()) {
          struct.ioException.write(oprot);
        }
        if (struct.isSetCersaiDataMismatchException()) {
          struct.cersaiDataMismatchException.write(oprot);
        }
        if (struct.isSetCersaiDobMismatchException()) {
          struct.cersaiDobMismatchException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, downloadCersaiCKYCReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new CersaiResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioException = new IOException();
          struct.ioException.read(iprot);
          struct.setIoExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cersaiDataMismatchException = new CersaiDataMismatchException();
          struct.cersaiDataMismatchException.read(iprot);
          struct.setCersaiDataMismatchExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cersaiDobMismatchException = new CersaiDobMismatchException();
          struct.cersaiDobMismatchException.read(iprot);
          struct.setCersaiDobMismatchExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
