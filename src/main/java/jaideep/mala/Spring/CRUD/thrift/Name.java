/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-23")
public class Name implements org.apache.thrift.TBase<Name, Name._Fields>, java.io.Serializable, Cloneable, Comparable<Name> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Name");

  private static final org.apache.thrift.protocol.TField SALUTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("salutation", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SECOND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField THIRD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NameStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NameTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String salutation; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String firstName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String secondName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String thirdName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALUTATION((short)1, "salutation"),
    FIRST_NAME((short)2, "firstName"),
    SECOND_NAME((short)3, "secondName"),
    THIRD_NAME((short)4, "thirdName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALUTATION
          return SALUTATION;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // SECOND_NAME
          return SECOND_NAME;
        case 4: // THIRD_NAME
          return THIRD_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALUTATION, new org.apache.thrift.meta_data.FieldMetaData("salutation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SECOND_NAME, new org.apache.thrift.meta_data.FieldMetaData("secondName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.THIRD_NAME, new org.apache.thrift.meta_data.FieldMetaData("thirdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Name.class, metaDataMap);
  }

  public Name() {
  }

  public Name(
    java.lang.String salutation,
    java.lang.String firstName,
    java.lang.String secondName,
    java.lang.String thirdName)
  {
    this();
    this.salutation = salutation;
    this.firstName = firstName;
    this.secondName = secondName;
    this.thirdName = thirdName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Name(Name other) {
    if (other.isSetSalutation()) {
      this.salutation = other.salutation;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetSecondName()) {
      this.secondName = other.secondName;
    }
    if (other.isSetThirdName()) {
      this.thirdName = other.thirdName;
    }
  }

  public Name deepCopy() {
    return new Name(this);
  }

  @Override
  public void clear() {
    this.salutation = null;
    this.firstName = null;
    this.secondName = null;
    this.thirdName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSalutation() {
    return this.salutation;
  }

  public Name setSalutation(@org.apache.thrift.annotation.Nullable java.lang.String salutation) {
    this.salutation = salutation;
    return this;
  }

  public void unsetSalutation() {
    this.salutation = null;
  }

  /** Returns true if field salutation is set (has been assigned a value) and false otherwise */
  public boolean isSetSalutation() {
    return this.salutation != null;
  }

  public void setSalutationIsSet(boolean value) {
    if (!value) {
      this.salutation = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirstName() {
    return this.firstName;
  }

  public Name setFirstName(@org.apache.thrift.annotation.Nullable java.lang.String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecondName() {
    return this.secondName;
  }

  public Name setSecondName(@org.apache.thrift.annotation.Nullable java.lang.String secondName) {
    this.secondName = secondName;
    return this;
  }

  public void unsetSecondName() {
    this.secondName = null;
  }

  /** Returns true if field secondName is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondName() {
    return this.secondName != null;
  }

  public void setSecondNameIsSet(boolean value) {
    if (!value) {
      this.secondName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getThirdName() {
    return this.thirdName;
  }

  public Name setThirdName(@org.apache.thrift.annotation.Nullable java.lang.String thirdName) {
    this.thirdName = thirdName;
    return this;
  }

  public void unsetThirdName() {
    this.thirdName = null;
  }

  /** Returns true if field thirdName is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdName() {
    return this.thirdName != null;
  }

  public void setThirdNameIsSet(boolean value) {
    if (!value) {
      this.thirdName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SALUTATION:
      if (value == null) {
        unsetSalutation();
      } else {
        setSalutation((java.lang.String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((java.lang.String)value);
      }
      break;

    case SECOND_NAME:
      if (value == null) {
        unsetSecondName();
      } else {
        setSecondName((java.lang.String)value);
      }
      break;

    case THIRD_NAME:
      if (value == null) {
        unsetThirdName();
      } else {
        setThirdName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SALUTATION:
      return getSalutation();

    case FIRST_NAME:
      return getFirstName();

    case SECOND_NAME:
      return getSecondName();

    case THIRD_NAME:
      return getThirdName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SALUTATION:
      return isSetSalutation();
    case FIRST_NAME:
      return isSetFirstName();
    case SECOND_NAME:
      return isSetSecondName();
    case THIRD_NAME:
      return isSetThirdName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Name)
      return this.equals((Name)that);
    return false;
  }

  public boolean equals(Name that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_salutation = true && this.isSetSalutation();
    boolean that_present_salutation = true && that.isSetSalutation();
    if (this_present_salutation || that_present_salutation) {
      if (!(this_present_salutation && that_present_salutation))
        return false;
      if (!this.salutation.equals(that.salutation))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_secondName = true && this.isSetSecondName();
    boolean that_present_secondName = true && that.isSetSecondName();
    if (this_present_secondName || that_present_secondName) {
      if (!(this_present_secondName && that_present_secondName))
        return false;
      if (!this.secondName.equals(that.secondName))
        return false;
    }

    boolean this_present_thirdName = true && this.isSetThirdName();
    boolean that_present_thirdName = true && that.isSetThirdName();
    if (this_present_thirdName || that_present_thirdName) {
      if (!(this_present_thirdName && that_present_thirdName))
        return false;
      if (!this.thirdName.equals(that.thirdName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSalutation()) ? 131071 : 524287);
    if (isSetSalutation())
      hashCode = hashCode * 8191 + salutation.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirstName()) ? 131071 : 524287);
    if (isSetFirstName())
      hashCode = hashCode * 8191 + firstName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecondName()) ? 131071 : 524287);
    if (isSetSecondName())
      hashCode = hashCode * 8191 + secondName.hashCode();

    hashCode = hashCode * 8191 + ((isSetThirdName()) ? 131071 : 524287);
    if (isSetThirdName())
      hashCode = hashCode * 8191 + thirdName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Name other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSalutation()).compareTo(other.isSetSalutation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalutation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salutation, other.salutation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecondName()).compareTo(other.isSetSecondName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondName, other.secondName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThirdName()).compareTo(other.isSetThirdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdName, other.thirdName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Name(");
    boolean first = true;

    sb.append("salutation:");
    if (this.salutation == null) {
      sb.append("null");
    } else {
      sb.append(this.salutation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondName:");
    if (this.secondName == null) {
      sb.append("null");
    } else {
      sb.append(this.secondName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdName:");
    if (this.thirdName == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NameStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NameStandardScheme getScheme() {
      return new NameStandardScheme();
    }
  }

  private static class NameStandardScheme extends org.apache.thrift.scheme.StandardScheme<Name> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Name struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALUTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salutation = iprot.readString();
              struct.setSalutationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECOND_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondName = iprot.readString();
              struct.setSecondNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THIRD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdName = iprot.readString();
              struct.setThirdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Name struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.salutation != null) {
        oprot.writeFieldBegin(SALUTATION_FIELD_DESC);
        oprot.writeString(struct.salutation);
        oprot.writeFieldEnd();
      }
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.secondName != null) {
        oprot.writeFieldBegin(SECOND_NAME_FIELD_DESC);
        oprot.writeString(struct.secondName);
        oprot.writeFieldEnd();
      }
      if (struct.thirdName != null) {
        oprot.writeFieldBegin(THIRD_NAME_FIELD_DESC);
        oprot.writeString(struct.thirdName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NameTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NameTupleScheme getScheme() {
      return new NameTupleScheme();
    }
  }

  private static class NameTupleScheme extends org.apache.thrift.scheme.TupleScheme<Name> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Name struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSalutation()) {
        optionals.set(0);
      }
      if (struct.isSetFirstName()) {
        optionals.set(1);
      }
      if (struct.isSetSecondName()) {
        optionals.set(2);
      }
      if (struct.isSetThirdName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSalutation()) {
        oprot.writeString(struct.salutation);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetSecondName()) {
        oprot.writeString(struct.secondName);
      }
      if (struct.isSetThirdName()) {
        oprot.writeString(struct.thirdName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Name struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.salutation = iprot.readString();
        struct.setSalutationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secondName = iprot.readString();
        struct.setSecondNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.thirdName = iprot.readString();
        struct.setThirdNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

