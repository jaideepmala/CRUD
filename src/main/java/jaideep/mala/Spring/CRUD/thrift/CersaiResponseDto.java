/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-23")
public class CersaiResponseDto implements org.apache.thrift.TBase<CersaiResponseDto, CersaiResponseDto._Fields>, java.io.Serializable, Cloneable, Comparable<CersaiResponseDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CersaiResponseDto");

  private static final org.apache.thrift.protocol.TField LEAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leadId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MOTHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("motherName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FATHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fatherName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MARITAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("maritalStatus", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAN_FIELD_DESC = new org.apache.thrift.protocol.TField("pan", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PINCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pincode", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CersaiResponseDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CersaiResponseDtoTupleSchemeFactory();

  public long leadId; // required
  public @org.apache.thrift.annotation.Nullable Name name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String motherName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fatherName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String gender; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String maritalStatus; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String nationality; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pan; // required
  public @org.apache.thrift.annotation.Nullable Address address; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pincode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String email; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEAD_ID((short)1, "leadId"),
    NAME((short)2, "name"),
    MOTHER_NAME((short)3, "motherName"),
    FATHER_NAME((short)4, "fatherName"),
    GENDER((short)5, "gender"),
    MARITAL_STATUS((short)6, "maritalStatus"),
    NATIONALITY((short)7, "nationality"),
    PAN((short)8, "pan"),
    ADDRESS((short)9, "address"),
    PINCODE((short)10, "pincode"),
    EMAIL((short)11, "email");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEAD_ID
          return LEAD_ID;
        case 2: // NAME
          return NAME;
        case 3: // MOTHER_NAME
          return MOTHER_NAME;
        case 4: // FATHER_NAME
          return FATHER_NAME;
        case 5: // GENDER
          return GENDER;
        case 6: // MARITAL_STATUS
          return MARITAL_STATUS;
        case 7: // NATIONALITY
          return NATIONALITY;
        case 8: // PAN
          return PAN;
        case 9: // ADDRESS
          return ADDRESS;
        case 10: // PINCODE
          return PINCODE;
        case 11: // EMAIL
          return EMAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEADID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEAD_ID, new org.apache.thrift.meta_data.FieldMetaData("leadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Name.class)));
    tmpMap.put(_Fields.MOTHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("motherName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.FATHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("fatherName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.MARITAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("maritalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.PAN, new org.apache.thrift.meta_data.FieldMetaData("pan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    tmpMap.put(_Fields.PINCODE, new org.apache.thrift.meta_data.FieldMetaData("pincode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CersaiResponseDto.class, metaDataMap);
  }

  public CersaiResponseDto() {
  }

  public CersaiResponseDto(
    long leadId,
    Name name,
    java.lang.String motherName,
    java.lang.String fatherName,
    java.lang.String gender,
    java.lang.String maritalStatus,
    java.lang.String nationality,
    java.lang.String pan,
    Address address,
    java.lang.String pincode,
    java.lang.String email)
  {
    this();
    this.leadId = leadId;
    setLeadIdIsSet(true);
    this.name = name;
    this.motherName = motherName;
    this.fatherName = fatherName;
    this.gender = gender;
    this.maritalStatus = maritalStatus;
    this.nationality = nationality;
    this.pan = pan;
    this.address = address;
    this.pincode = pincode;
    this.email = email;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CersaiResponseDto(CersaiResponseDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.leadId = other.leadId;
    if (other.isSetName()) {
      this.name = new Name(other.name);
    }
    if (other.isSetMotherName()) {
      this.motherName = other.motherName;
    }
    if (other.isSetFatherName()) {
      this.fatherName = other.fatherName;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetMaritalStatus()) {
      this.maritalStatus = other.maritalStatus;
    }
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetPan()) {
      this.pan = other.pan;
    }
    if (other.isSetAddress()) {
      this.address = new Address(other.address);
    }
    if (other.isSetPincode()) {
      this.pincode = other.pincode;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
  }

  public CersaiResponseDto deepCopy() {
    return new CersaiResponseDto(this);
  }

  @Override
  public void clear() {
    setLeadIdIsSet(false);
    this.leadId = 0;
    this.name = null;
    this.motherName = null;
    this.fatherName = null;
    this.gender = null;
    this.maritalStatus = null;
    this.nationality = null;
    this.pan = null;
    this.address = null;
    this.pincode = null;
    this.email = null;
  }

  public long getLeadId() {
    return this.leadId;
  }

  public CersaiResponseDto setLeadId(long leadId) {
    this.leadId = leadId;
    setLeadIdIsSet(true);
    return this;
  }

  public void unsetLeadId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEADID_ISSET_ID);
  }

  /** Returns true if field leadId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeadId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEADID_ISSET_ID);
  }

  public void setLeadIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEADID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Name getName() {
    return this.name;
  }

  public CersaiResponseDto setName(@org.apache.thrift.annotation.Nullable Name name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMotherName() {
    return this.motherName;
  }

  public CersaiResponseDto setMotherName(@org.apache.thrift.annotation.Nullable java.lang.String motherName) {
    this.motherName = motherName;
    return this;
  }

  public void unsetMotherName() {
    this.motherName = null;
  }

  /** Returns true if field motherName is set (has been assigned a value) and false otherwise */
  public boolean isSetMotherName() {
    return this.motherName != null;
  }

  public void setMotherNameIsSet(boolean value) {
    if (!value) {
      this.motherName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFatherName() {
    return this.fatherName;
  }

  public CersaiResponseDto setFatherName(@org.apache.thrift.annotation.Nullable java.lang.String fatherName) {
    this.fatherName = fatherName;
    return this;
  }

  public void unsetFatherName() {
    this.fatherName = null;
  }

  /** Returns true if field fatherName is set (has been assigned a value) and false otherwise */
  public boolean isSetFatherName() {
    return this.fatherName != null;
  }

  public void setFatherNameIsSet(boolean value) {
    if (!value) {
      this.fatherName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGender() {
    return this.gender;
  }

  public CersaiResponseDto setGender(@org.apache.thrift.annotation.Nullable java.lang.String gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMaritalStatus() {
    return this.maritalStatus;
  }

  public CersaiResponseDto setMaritalStatus(@org.apache.thrift.annotation.Nullable java.lang.String maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  public void unsetMaritalStatus() {
    this.maritalStatus = null;
  }

  /** Returns true if field maritalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMaritalStatus() {
    return this.maritalStatus != null;
  }

  public void setMaritalStatusIsSet(boolean value) {
    if (!value) {
      this.maritalStatus = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNationality() {
    return this.nationality;
  }

  public CersaiResponseDto setNationality(@org.apache.thrift.annotation.Nullable java.lang.String nationality) {
    this.nationality = nationality;
    return this;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPan() {
    return this.pan;
  }

  public CersaiResponseDto setPan(@org.apache.thrift.annotation.Nullable java.lang.String pan) {
    this.pan = pan;
    return this;
  }

  public void unsetPan() {
    this.pan = null;
  }

  /** Returns true if field pan is set (has been assigned a value) and false otherwise */
  public boolean isSetPan() {
    return this.pan != null;
  }

  public void setPanIsSet(boolean value) {
    if (!value) {
      this.pan = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Address getAddress() {
    return this.address;
  }

  public CersaiResponseDto setAddress(@org.apache.thrift.annotation.Nullable Address address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPincode() {
    return this.pincode;
  }

  public CersaiResponseDto setPincode(@org.apache.thrift.annotation.Nullable java.lang.String pincode) {
    this.pincode = pincode;
    return this;
  }

  public void unsetPincode() {
    this.pincode = null;
  }

  /** Returns true if field pincode is set (has been assigned a value) and false otherwise */
  public boolean isSetPincode() {
    return this.pincode != null;
  }

  public void setPincodeIsSet(boolean value) {
    if (!value) {
      this.pincode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmail() {
    return this.email;
  }

  public CersaiResponseDto setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LEAD_ID:
      if (value == null) {
        unsetLeadId();
      } else {
        setLeadId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((Name)value);
      }
      break;

    case MOTHER_NAME:
      if (value == null) {
        unsetMotherName();
      } else {
        setMotherName((java.lang.String)value);
      }
      break;

    case FATHER_NAME:
      if (value == null) {
        unsetFatherName();
      } else {
        setFatherName((java.lang.String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.String)value);
      }
      break;

    case MARITAL_STATUS:
      if (value == null) {
        unsetMaritalStatus();
      } else {
        setMaritalStatus((java.lang.String)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((java.lang.String)value);
      }
      break;

    case PAN:
      if (value == null) {
        unsetPan();
      } else {
        setPan((java.lang.String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((Address)value);
      }
      break;

    case PINCODE:
      if (value == null) {
        unsetPincode();
      } else {
        setPincode((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEAD_ID:
      return getLeadId();

    case NAME:
      return getName();

    case MOTHER_NAME:
      return getMotherName();

    case FATHER_NAME:
      return getFatherName();

    case GENDER:
      return getGender();

    case MARITAL_STATUS:
      return getMaritalStatus();

    case NATIONALITY:
      return getNationality();

    case PAN:
      return getPan();

    case ADDRESS:
      return getAddress();

    case PINCODE:
      return getPincode();

    case EMAIL:
      return getEmail();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEAD_ID:
      return isSetLeadId();
    case NAME:
      return isSetName();
    case MOTHER_NAME:
      return isSetMotherName();
    case FATHER_NAME:
      return isSetFatherName();
    case GENDER:
      return isSetGender();
    case MARITAL_STATUS:
      return isSetMaritalStatus();
    case NATIONALITY:
      return isSetNationality();
    case PAN:
      return isSetPan();
    case ADDRESS:
      return isSetAddress();
    case PINCODE:
      return isSetPincode();
    case EMAIL:
      return isSetEmail();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CersaiResponseDto)
      return this.equals((CersaiResponseDto)that);
    return false;
  }

  public boolean equals(CersaiResponseDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leadId = true;
    boolean that_present_leadId = true;
    if (this_present_leadId || that_present_leadId) {
      if (!(this_present_leadId && that_present_leadId))
        return false;
      if (this.leadId != that.leadId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_motherName = true && this.isSetMotherName();
    boolean that_present_motherName = true && that.isSetMotherName();
    if (this_present_motherName || that_present_motherName) {
      if (!(this_present_motherName && that_present_motherName))
        return false;
      if (!this.motherName.equals(that.motherName))
        return false;
    }

    boolean this_present_fatherName = true && this.isSetFatherName();
    boolean that_present_fatherName = true && that.isSetFatherName();
    if (this_present_fatherName || that_present_fatherName) {
      if (!(this_present_fatherName && that_present_fatherName))
        return false;
      if (!this.fatherName.equals(that.fatherName))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_maritalStatus = true && this.isSetMaritalStatus();
    boolean that_present_maritalStatus = true && that.isSetMaritalStatus();
    if (this_present_maritalStatus || that_present_maritalStatus) {
      if (!(this_present_maritalStatus && that_present_maritalStatus))
        return false;
      if (!this.maritalStatus.equals(that.maritalStatus))
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_pan = true && this.isSetPan();
    boolean that_present_pan = true && that.isSetPan();
    if (this_present_pan || that_present_pan) {
      if (!(this_present_pan && that_present_pan))
        return false;
      if (!this.pan.equals(that.pan))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_pincode = true && this.isSetPincode();
    boolean that_present_pincode = true && that.isSetPincode();
    if (this_present_pincode || that_present_pincode) {
      if (!(this_present_pincode && that_present_pincode))
        return false;
      if (!this.pincode.equals(that.pincode))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(leadId);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMotherName()) ? 131071 : 524287);
    if (isSetMotherName())
      hashCode = hashCode * 8191 + motherName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFatherName()) ? 131071 : 524287);
    if (isSetFatherName())
      hashCode = hashCode * 8191 + fatherName.hashCode();

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + gender.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaritalStatus()) ? 131071 : 524287);
    if (isSetMaritalStatus())
      hashCode = hashCode * 8191 + maritalStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetNationality()) ? 131071 : 524287);
    if (isSetNationality())
      hashCode = hashCode * 8191 + nationality.hashCode();

    hashCode = hashCode * 8191 + ((isSetPan()) ? 131071 : 524287);
    if (isSetPan())
      hashCode = hashCode * 8191 + pan.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetPincode()) ? 131071 : 524287);
    if (isSetPincode())
      hashCode = hashCode * 8191 + pincode.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CersaiResponseDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLeadId()).compareTo(other.isSetLeadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leadId, other.leadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMotherName()).compareTo(other.isSetMotherName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotherName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.motherName, other.motherName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFatherName()).compareTo(other.isSetFatherName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFatherName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fatherName, other.fatherName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaritalStatus()).compareTo(other.isSetMaritalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaritalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maritalStatus, other.maritalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPan()).compareTo(other.isSetPan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pan, other.pan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPincode()).compareTo(other.isSetPincode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPincode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pincode, other.pincode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CersaiResponseDto(");
    boolean first = true;

    sb.append("leadId:");
    sb.append(this.leadId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("motherName:");
    if (this.motherName == null) {
      sb.append("null");
    } else {
      sb.append(this.motherName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fatherName:");
    if (this.fatherName == null) {
      sb.append("null");
    } else {
      sb.append(this.fatherName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maritalStatus:");
    if (this.maritalStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.maritalStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationality:");
    if (this.nationality == null) {
      sb.append("null");
    } else {
      sb.append(this.nationality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pan:");
    if (this.pan == null) {
      sb.append("null");
    } else {
      sb.append(this.pan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pincode:");
    if (this.pincode == null) {
      sb.append("null");
    } else {
      sb.append(this.pincode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (name != null) {
      name.validate();
    }
    if (address != null) {
      address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CersaiResponseDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CersaiResponseDtoStandardScheme getScheme() {
      return new CersaiResponseDtoStandardScheme();
    }
  }

  private static class CersaiResponseDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<CersaiResponseDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CersaiResponseDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leadId = iprot.readI64();
              struct.setLeadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.name = new Name();
              struct.name.read(iprot);
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOTHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.motherName = iprot.readString();
              struct.setMotherNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FATHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fatherName = iprot.readString();
              struct.setFatherNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gender = iprot.readString();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MARITAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maritalStatus = iprot.readString();
              struct.setMaritalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pan = iprot.readString();
              struct.setPanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.address = new Address();
              struct.address.read(iprot);
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PINCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pincode = iprot.readString();
              struct.setPincodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CersaiResponseDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEAD_ID_FIELD_DESC);
      oprot.writeI64(struct.leadId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        struct.name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.motherName != null) {
        oprot.writeFieldBegin(MOTHER_NAME_FIELD_DESC);
        oprot.writeString(struct.motherName);
        oprot.writeFieldEnd();
      }
      if (struct.fatherName != null) {
        oprot.writeFieldBegin(FATHER_NAME_FIELD_DESC);
        oprot.writeString(struct.fatherName);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeString(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.maritalStatus != null) {
        oprot.writeFieldBegin(MARITAL_STATUS_FIELD_DESC);
        oprot.writeString(struct.maritalStatus);
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
        oprot.writeString(struct.nationality);
        oprot.writeFieldEnd();
      }
      if (struct.pan != null) {
        oprot.writeFieldBegin(PAN_FIELD_DESC);
        oprot.writeString(struct.pan);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        struct.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pincode != null) {
        oprot.writeFieldBegin(PINCODE_FIELD_DESC);
        oprot.writeString(struct.pincode);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CersaiResponseDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CersaiResponseDtoTupleScheme getScheme() {
      return new CersaiResponseDtoTupleScheme();
    }
  }

  private static class CersaiResponseDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<CersaiResponseDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CersaiResponseDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLeadId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMotherName()) {
        optionals.set(2);
      }
      if (struct.isSetFatherName()) {
        optionals.set(3);
      }
      if (struct.isSetGender()) {
        optionals.set(4);
      }
      if (struct.isSetMaritalStatus()) {
        optionals.set(5);
      }
      if (struct.isSetNationality()) {
        optionals.set(6);
      }
      if (struct.isSetPan()) {
        optionals.set(7);
      }
      if (struct.isSetAddress()) {
        optionals.set(8);
      }
      if (struct.isSetPincode()) {
        optionals.set(9);
      }
      if (struct.isSetEmail()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetLeadId()) {
        oprot.writeI64(struct.leadId);
      }
      if (struct.isSetName()) {
        struct.name.write(oprot);
      }
      if (struct.isSetMotherName()) {
        oprot.writeString(struct.motherName);
      }
      if (struct.isSetFatherName()) {
        oprot.writeString(struct.fatherName);
      }
      if (struct.isSetGender()) {
        oprot.writeString(struct.gender);
      }
      if (struct.isSetMaritalStatus()) {
        oprot.writeString(struct.maritalStatus);
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetPan()) {
        oprot.writeString(struct.pan);
      }
      if (struct.isSetAddress()) {
        struct.address.write(oprot);
      }
      if (struct.isSetPincode()) {
        oprot.writeString(struct.pincode);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CersaiResponseDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.leadId = iprot.readI64();
        struct.setLeadIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = new Name();
        struct.name.read(iprot);
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.motherName = iprot.readString();
        struct.setMotherNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fatherName = iprot.readString();
        struct.setFatherNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gender = iprot.readString();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maritalStatus = iprot.readString();
        struct.setMaritalStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pan = iprot.readString();
        struct.setPanIsSet(true);
      }
      if (incoming.get(8)) {
        struct.address = new Address();
        struct.address.read(iprot);
        struct.setAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pincode = iprot.readString();
        struct.setPincodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

